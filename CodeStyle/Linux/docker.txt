https://docs.docker.com/network/macvlan/

免sudo操作
sudo groupadd docker
sudo usermod -aG docker $USER

启用systemctl
1)run时启用-d --privileged参数
2)run command为/usr/sbin/init
3)docker exec -it centos7 /bin/bash进入容器

https://docs.docker.com/config/daemon/systemd/#httphttps-proxy

================make dockerfile start======================
#docker build -t imageID

#Create rabbitmq image.
#http://www.rabbitmq.com/download.html


# base centos with net-tools
FROM 5182e96772bf

MAINTAINER cyl

RUN mkdir /download

ADD erlang-21.0.8-1.el7.centos.x86_64.rpm /download
ADD rabbitmq-server-3.7.7-1.el7.noarch.rpm /download

RUN yum install net-tools socat logrotate -y

RUN rpm -i /download/erlang-21.0.8-1.el7.centos.x86_64.rpm
RUN rpm -i /download/rabbitmq-server-3.7.7-1.el7.noarch.rpm

RUN rm -f /download/*.*

RUN rabbitmq-plugins enable rabbitmq_management

RUN chown rabbitmq:rabbitmq /var/lib/rabbitmq/.erlang.cookie

CMD ["/usr/sbin/init"]

# ENTRYPOINT ["/usr/sbin/init"]
=====================make dockerfile end===========================

docker network create -d macvlan --subnet=192.168.2.0/24 --gateway=192.168.2.1 -o parent=br0 macvlan2

https://docs.docker.com/engine/install/centos/
yum install -y yum-utils
yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
yum install docker-ce docker-ce-cli containerd.io -y

yum list docker-ce --showduplicates | sort -r

redis
dir参数默认为/data
docker run -d -h=redis --name redis -p 6379:6379 -e TZ='Asia/Shanghai' xxxxx --requirepass "a6%8YDCnd<BgH_z=" --logfile "/data/redis.log"
docker exec -it xxx redis-cli

-------------------------
docker run -d -p 9000:9000 -p 9000:9000/udp (-P,--net host) --name ss-libev -v shadowsocks-libev(宿主机目录,相对目录在/var/lib/docker/volumes/下):/etc/shadowsocks-libev(容器内目录) teddysun/shadowsocks-libev
hostPort:containerPort、ip:hostPort:containerPort、 ip::containerPort(映射指定地址的任意端口127.0.0.1::5000,绑定 localhost 的任意端口到容器的 5000 端口，本地主机会自动分配一个端口)。


https://hub.docker.com/r/kedu/snx-checkpoint-vpn
docker run --name snx-vpn \
  --cap-add=ALL \
  -v /lib/modules:/lib/modules \
  -e SNX_SERVER=122.193.20.46 \
  -e SNX_USER=eb-Yuelin_Chen \
  -e SNX_PASSWORD=catV^cb4 \
  -t \
  -d bf29ddb89e39
docker inspect --format '{{ .NetworkSettings.IPAddress }}' 00e58275ad36
route add -net 10.157.0.0 gw 172.17.0.2 netmask 255.255.0.0
vi /etc/resolv.conf
nameserver 10.157.20.164
https://hub.docker.com/r/danshan/docker-shadowsocks-client
https://hub.docker.com/r/gibby/openconnect
docker run --privileged \
-p 127.0.0.1::9000 \
-v custom.conf:/etc/unbound/unbound.conf.d/custom.conf \
-e OPTIONS="-u chenyuelin --authgroup=ADMINS --no-cert-check" \
-e SERVER=jp1.heon.win \
-e PASSWORD=9***** \
-t gibby/openconnect
https://hub.docker.com/r/wuamin/alpine-l2tp-vpn-client
https://hub.docker.com/r/leodagan/pptp
sysctl -w net.netfilter.nf_conntrack_helper=1
docker run --privileged (--cap-add NET_ADMIN) --name pptpclient -d \
-e SERVER=jp1.heon.win \
-e USERNAME=xxxxxxx \
-e PASSWORD=xxxxxx \
--device=/dev/ppp \
--dns 8.8.8.8 --dns 8.8.4.4 \
leodagan/pptp
docker run --rm --network container:pptpclient busybox wget -O- www.google.com
https://hub.docker.com/r/ajoergensen/tinyproxy
docker run --privileged --name tinyproxy \
--net container:pptpclient \
-e "ALLOWED=0.0.0.0/0" \
-e "MINSPARESERVERS=20" \
-e "MAXSPARESERVERS=20" \
-e "MAXCLIENTS=200" \
-e "LOG_TO_SYSLOG=Off" \
-e "LOG_LEVEL=Warning" \
ajoergensen/tinyproxy


docker save docker.io/openjdk:tag | gzip > imageName.tar.gz
gunzip -c imageName.tar.gz | docker load
gzip -d -c imageName.tar.gz | docker load
